system Orchestrator {
    consumes OrchestrationPush;
    consumes OrchestrationCapabilities;

    produces OrchestrationService;
    produces OrchestrationStoreManagement;
}

service OrchestrationService {
    interface Orchestration {
        method RequestService(ServiceRequestForm): OrchestrationResponse;
    }
}

implement OrchestrationService using HTTP/JSON {
    property BasePath: "/orchestrator";

    interface Orchestration {
        method RequestService {
            Method: "POST",
            Path: "/orchestration",
        }
    }
}

record ServiceRequestForm {
    @Doc("
        The ArrowheadSystem identifier that is requesting the orchestration.
        Mandatory field.
    ")
    RequesterSystem: ArrowheadSystem,

    @Doc("
        Not to be used by Application Systems. This field is only used when
        there is an inbound request from another Cloud. This can only be
        submitted by the Gatekeeper.
    ")
    RequesterCloud: ArrowheadCloud,

    @Doc("
        Not mandatory. When not filled out, the Orchestrator operate in the
        ”default configuration” mode. When filled out, other fields will affect
        how the orchestration will work – but the Service will be specified by
        the Consumer in advance then.
    ")
    RequestedService: ArrowheadService,

    @Doc("
        These flags can be set to tailor the orchestration process.
    ")
    OrchestrationFlags: Map<String, Boolean>,

    @Doc("
        There can be a list from the Consumer stating which other Application
        Systems (even from other Clouds) it wishes to connect. If this field is
        filled out, the Orchestrator will try to facilitate these preferences.
    ")
    PreferredProviders: List<PreferredProvider>,

    @Doc("
        This object will be presenting the Consumer’s selected QoS level. Not
        implemented.
    ")
    RequestedQoS: Map<String, String>,
}

record PreferredProvider {
    ProviderSystem: ArrowheadSystem,
    ProviderCloud: ArrowheadCloud,
}

record OrchestrationResponse {
    Response: List<OrchestrationForm>,
}

record OrchestrationForm {
    @Doc("
        The exact Service that needs to be consumed. This response matches the
        ServiceRequestForm’s (if that was filled out), but it comes from the
        exact Service instance with proper metadata and interface identifier
        (only one).
    ")
    Service: ArrowheadService,

    @Doc("
        The Application System description that will provide the Service.
    ")
    Provider: ArrowheadSystem,

    @Doc("
        The base URL within the Service Provider that will contain the seeked
        Service.
    ")
    ServiceURI: String,

    @Doc("
        Optional additional data from the orchestration.
    ")
    Instruction: String,

    @Doc("
        The encrypted authorization token.
    ")
    AuthorizationToken: String,

    @Doc("
        The signature from the Authorization System for the token (verifying the
        token issuing).
    ")
    Signature: String,

    @Doc("
        Enumeration with values that signal certain things, such as the provider
        is from another Cloud, or the service offering might have expired
        already.
    ")
    Warnings: List<OrchestratorWarnings>,
}

enum OrchestratorWarnings {
    FROM_OTHER_CLOUD,
    TTL_EXPIRING,
    TTL_EXPIRED,
    TTL_UNKNOWN,
}

service OrchestrationStoreManagement {
    interface Management {
        // TODO
    }
}
